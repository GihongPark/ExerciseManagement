{"version":3,"sources":["modules/list.ts","modules/modal.ts","components/Record.tsx","containers/RecordContainer.tsx","components/List.tsx","containers/ListContainer.tsx","components/modal/index.tsx","containers/ModalContainer.tsx","App.tsx","modules/exercise.ts","modules/index.ts","index.tsx"],"names":["initialState","localStorage","exerciseManager","JSON","parse","Reducer","temp","state","action","type","concat","id","payload","title","date","records","filter","list","map","record","stringify","data","RecordComponent","dispatch","useDispatch","className","exercise","weight","reps","onClick","openUpdateInput","icon","faEdit","RecordContainer","length","Record","key","openAddInput","faPlus","ListComponent","onRemoveList","onUpdateTitle","useState","setTitle","onChange","e","currentTarget","value","placeholder","size","maxLength","faSave","faTimes","ListContainer","lists","useSelector","scroll","useRef","prevListsLength","useEffect","current","scrollTo","scrollHeight","removeList","updateTitle","ref","List","Math","floor","random","Date","ModalComponent","exercises","onAddRecord","onUpdateRecord","onRemoveRecord","setExercise","exerciseList","setExerciseList","setWeight","setReps","selector","dataset","name","match","Number","replace","onCancel","getExerciseList","section","faTrashAlt","onSubmit","preventDefault","data-id","onFocus","classList","add","remove","liArr","push","mapToExercises","ModalContainer","modalState","modal","getTime","addRecord","updateRecord","recordId","removeRecord","App","exerciseKind","initExercise","lately","rootReducer","combineReducers","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8a30a8bc.chunk.js","sourcesContent":["const ADD_LIST = 'list/ADD_LIST' as const;\r\nconst REMOVE_LIST = 'list/REMOVE_LIST' as const;\r\nconst UPDATE_TITLE = 'list/UPDATE_TITLE' as const;\r\n\r\nconst ADD_RECORD = 'record/ADD_RECORD' as const;\r\nconst REMOVE_RECORD = 'record/REMOVE_RECORD' as const;\r\nconst UPDATE_RECORD = 'record/UPDATE_RECORD' as const;\r\n\r\nlet id = () => `${Math.floor(Math.random() * 9999)}_${Math.floor(Math.random() * 9999)}_${Math.floor(Math.random() * 9999)}`;\r\nexport const addList = () => ({\r\n    type: ADD_LIST,\r\n    payload: {\r\n        id: id(),\r\n        title: '',\r\n        date: new Date(),\r\n        records: []\r\n    }\r\n});\r\nexport const removeList = (id: string) => ({\r\n    type: REMOVE_LIST,\r\n    payload: id\r\n});\r\nexport const updateTitle = (\r\n    id: string,\r\n    title: string\r\n) => ({\r\n    type: UPDATE_TITLE,\r\n    payload: {\r\n        id,\r\n        title,\r\n    }\r\n});\r\n\r\nexport const addRecord = (\r\n    id: string,\r\n    record: Record\r\n) => ({\r\n    type: ADD_RECORD,\r\n    payload: {\r\n        id: id,\r\n        record: {\r\n            id: `${id}_${new Date().getTime()}`,\r\n            exercise: record.exercise,\r\n            weight: record.weight,\r\n            reps: record.reps\r\n        }\r\n    }\r\n});\r\nexport const removeRecord = (\r\n    id: string,\r\n    recordId: string\r\n) => {\r\n    return {\r\n    type: REMOVE_RECORD,\r\n    payload: {\r\n        id: id,\r\n        record: {\r\n            id: recordId\r\n        }\r\n    }\r\n}\r\n};\r\nexport const updateRecord = (\r\n    id: string,\r\n    record: Record\r\n) => ({\r\n    type: UPDATE_RECORD,\r\n    payload: {\r\n        id: id,\r\n        record: {\r\n            id: record.id,\r\n            exercise: record.exercise,\r\n            weight: record.weight,\r\n            reps: record.reps\r\n        }\r\n    }\r\n});\r\n\r\ntype ListAction = \r\n    | ReturnType<typeof addList>\r\n    | ReturnType<typeof removeList>\r\n    | ReturnType<typeof updateTitle>\r\n    | ReturnType<typeof addRecord>\r\n    | ReturnType<typeof removeRecord>\r\n    | ReturnType<typeof updateRecord>;\r\n\r\nexport type List = {\r\n    id: string;\r\n    title: string;\r\n    date: Date;\r\n    records: Record[]\r\n}\r\nexport type Record = {\r\n    id: string;\r\n    exercise: string;\r\n    weight: number;\r\n    reps: number;\r\n}\r\nexport type ListState = List[];\r\n\r\nconst initialState: ListState = localStorage.exerciseManager? JSON.parse(localStorage.exerciseManager) : [];\r\n\r\nfunction Reducer (\r\n    state: ListState = initialState,\r\n    action: ListAction\r\n): ListState {\r\n    let temp;\r\n    switch (action.type) {\r\n        case ADD_LIST: \r\n            temp = state.concat({\r\n                id: action.payload.id,\r\n                title: action.payload.title,\r\n                date: action.payload.date,\r\n                records: action.payload.records\r\n            });\r\n            break;\r\n        case REMOVE_LIST: \r\n            temp = state.filter(list => list.id !== action.payload); \r\n            break;\r\n        case UPDATE_TITLE:\r\n            temp = state.map(list => {\r\n                if(list.id === action.payload.id) {\r\n                    list = {\r\n                        ...list,\r\n                        title: action.payload.title\r\n                    }\r\n                }\r\n                return list;\r\n            });\r\n            break;\r\n        // TODO: list에서 record분리해서 관리하는 방법 고민\r\n        case ADD_RECORD:\r\n            temp = state.map(list => {\r\n                if(list.id === action.payload.id) {\r\n                    list = {\r\n                        ...list,\r\n                        records: [...list.records, action.payload.record]\r\n                    }\r\n                }\r\n                return list;\r\n            });\r\n            break;\r\n        case REMOVE_RECORD:\r\n            temp = state.map(list => {\r\n                if(list.id === action.payload.id) {\r\n                    list = {\r\n                        ...list,\r\n                        records: list.records.filter(record => record.id !== action.payload.record.id)\r\n                    }\r\n                }\r\n                return list;\r\n            });\r\n            break;\r\n        case UPDATE_RECORD:\r\n            temp = state.map(list => {\r\n                if(list.id === action.payload.id) {\r\n                    list = {\r\n                        ...list,\r\n                        records: list.records.map(record => {\r\n                            if(record.id === action.payload.record.id) {\r\n                                return action.payload.record\r\n                            }\r\n                            return record;\r\n                        })\r\n                    }\r\n                }\r\n                return list;\r\n            });\r\n            break;\r\n        default:\r\n            temp = state;\r\n            break;\r\n    }\r\n\r\n    // 로컬스토리지 저장\r\n    localStorage.exerciseManager = JSON.stringify(temp);\r\n    return temp;\r\n}\r\nexport default Reducer;","import { Record } from './list';\r\n\r\nconst OPEN_ADD_RECORD = 'modal/OPEN_ADD_RECORD' as const;\r\nconst OPEN_UPDATE_RECORD = 'modal/OPEN_UPDATE_RECORD' as const;\r\nconst CLOSE_MODAL = 'modal/CLOSE_MODAL' as const;\r\n\r\nexport const openAddInput = (\r\n    id: string,\r\n) => ({\r\n    type: OPEN_ADD_RECORD,\r\n    payload: {\r\n        state: 'ADD_RECORD',\r\n        data: {\r\n            id\r\n        }\r\n    }\r\n});\r\n\r\nexport const openUpdateInput = (\r\n    id: string,\r\n    record: Record\r\n) => ({\r\n    type: OPEN_UPDATE_RECORD,\r\n    payload: {\r\n        state: 'UPDATE_RECORD',\r\n        data: {\r\n            id,\r\n            record\r\n        }\r\n    }\r\n})\r\nexport const closeModal = () => ({\r\n    type: CLOSE_MODAL,\r\n    payload: {\r\n        state: 'CLOSE_MODAL'\r\n    }\r\n});\r\n\r\ntype ModalAction = \r\n    | ReturnType<typeof openAddInput>\r\n    | ReturnType<typeof openUpdateInput>\r\n    | ReturnType<typeof closeModal>;\r\n\r\n// TODO: 타입선언\r\ntype ModalState = {\r\n    state: string;\r\n    data?: {\r\n        id: string;\r\n        record?: Record\r\n    };\r\n};\r\n\r\nconst initialState: ModalState = {\r\n    state: 'CLOSE_MODAL'\r\n}\r\n\r\n\r\nfunction Reducer (\r\n    state: ModalState = initialState,\r\n    action: ModalAction\r\n): ModalState {\r\n    switch (action.type) {\r\n        // TODO: 리턴값\r\n        case OPEN_ADD_RECORD:\r\n            return {\r\n                state: action.payload.state,\r\n                data: action.payload.data\r\n            };\r\n        case OPEN_UPDATE_RECORD:\r\n            return {\r\n                state: action.payload.state,\r\n                data: action.payload.data\r\n            };\r\n        case CLOSE_MODAL:\r\n            return {\r\n                state: action.payload.state\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default Reducer;","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faEdit } from '@fortawesome/free-solid-svg-icons';\r\nimport { openUpdateInput } from '../modules/modal';\r\nimport { Record } from '../modules/list';\r\nimport { useDispatch } from 'react-redux';\r\n\r\ntype props = {\r\n    id: string;\r\n    record: Record;\r\n}\r\nfunction RecordComponent ({ id, record }: props) {\r\n    const dispatch = useDispatch();\r\n    const onOpen = () => {\r\n        dispatch(openUpdateInput(id, record))\r\n    };\r\n\r\n    return (\r\n        <li>\r\n            <div className='record-contents'>\r\n                <div>운동 : {record.exercise}</div>\r\n                <div>무게 : {record.weight}</div>\r\n                <div>횟수 : {record.reps}</div>\r\n            </div>\r\n            <div className=\"record-control\">\r\n                <button type='button' onClick={onOpen}><FontAwesomeIcon icon={faEdit} /></button>\r\n            </div>\r\n        </li>\r\n    )\r\n}\r\nexport default RecordComponent;","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { openAddInput } from '../modules/modal';\r\nimport { Record } from '../modules/list';\r\nimport { useDispatch } from 'react-redux';\r\nimport RecordComponent from '../components/Record';\r\n\r\ntype props = {\r\n    id: string;\r\n    records: Record[];\r\n}\r\nfunction RecordContainer ({id, records}:props) {\r\n    const dispatch = useDispatch();\r\n\r\n    const onOpen = () => {\r\n        dispatch(openAddInput(id));\r\n    };\r\n    const mapToRecord = () => {\r\n        if(records.length === 0) return <li className='isEmpty'>운동 기록이 없습니다.</li>;\r\n\r\n        return records.map(record => (\r\n            <RecordComponent key={record.id} id={id} record={record} />\r\n        ))\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <ul className='list-contents'>{mapToRecord()}</ul>\r\n            <button type='button' className='list-input' onClick={onOpen}><FontAwesomeIcon icon={faPlus} /> Add Record</button>\r\n        </>\r\n    )\r\n}\r\nexport default RecordContainer;","import React, { useState } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSave, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport {List} from '../modules/list';\r\nimport RecordContainer from '../containers/RecordContainer';\r\nimport './list.scss'\r\n\r\ntype props = {\r\n    list: List;\r\n    onRemoveList: (id: string) => void\r\n    onUpdateTitle: (id: string, title: string) => void\r\n}\r\nfunction ListComponent ({list, onRemoveList, onUpdateTitle}: props) {\r\n    const [title, setTitle] = useState(list.title);\r\n\r\n    const onTitle = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        if(e.currentTarget.value === '') {}\r\n        setTitle(e.currentTarget.value);\r\n    }\r\n    const onTitleSave = () => onUpdateTitle(list.id, title);\r\n    const onListDelete = () => onRemoveList(list.id);\r\n\r\n\r\n    return (\r\n        <div className='list'>\r\n            <div className='list-header'>\r\n                <div className='list-title'>\r\n                    <input type='text' onChange={onTitle} value={title} placeholder='title' size={1} maxLength={100} />\r\n                    <button type='button' onClick={onTitleSave}><FontAwesomeIcon icon={faSave} /></button>\r\n                </div>\r\n                <button type='button' className='list-del' onClick={onListDelete}><FontAwesomeIcon icon={faTimes} /></button>\r\n            </div>\r\n            <RecordContainer id={list.id} records={list.records} />\r\n        </div>\r\n    )\r\n}\r\nexport default ListComponent;","import React, { useEffect, useRef } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { RootState } from '../modules';\r\nimport { addList, removeList, updateTitle } from '../modules/list';\r\nimport ListComponent from '../components/List';\r\n\r\nfunction ListContainer () {\r\n    const lists = useSelector((state: RootState) => state.list);\r\n    const dispatch = useDispatch();\r\n    const scroll = useRef<HTMLDivElement>(null);\r\n    const prevListsLength = useRef(0);\r\n\r\n    useEffect(() => {\r\n        if(prevListsLength.current > 0 && prevListsLength.current < lists.length){\r\n            scroll.current?.scrollTo(0, scroll.current.scrollHeight)\r\n        }\r\n\r\n        prevListsLength.current = lists.length;\r\n    }, [lists])\r\n\r\n    const onAddList = () => {\r\n        dispatch(addList())\r\n    };\r\n    const onRemoveList = (id: string) => {\r\n        dispatch(removeList(id))\r\n    };\r\n    const onUpdateTitle = (id: string, title: string) => {\r\n        dispatch(updateTitle(id, title))\r\n    };\r\n\r\n    const mapToList = () => lists.map(list => (\r\n        <ListComponent key={list.id} \r\n            list={list} \r\n            onRemoveList={onRemoveList} \r\n            onUpdateTitle={onUpdateTitle}\r\n        />\r\n    ));\r\n    return (\r\n        <div className='list-wrapper' ref={scroll}>\r\n            {mapToList()}\r\n            <button type=\"button\" className='add_list' onClick={onAddList}>Add list</button>\r\n        </div>\r\n    )\r\n}\r\nexport default ListContainer;","import React, { useState, useRef, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { closeModal } from '../../modules/modal';\r\nimport { Record } from '../../modules/list';\r\nimport { Exercise } from '../../modules/exercise';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport './modal.scss';\r\n\r\ntype props = {\r\n    state: string;\r\n    data: any;\r\n    exercises: Exercise[];\r\n    onAddRecord?: (id: string, record: Record) => void;\r\n    onUpdateRecord?: (id: string, record: Record) => void\r\n    onRemoveRecord?: (id: string, recordId: string) => void\r\n}\r\nfunction ModalComponent ({state, data, exercises, onAddRecord, onUpdateRecord, onRemoveRecord}: props) {\r\n    const [exercise, setExercise] = useState('');\r\n    const [exerciseList, setExerciseList] = useState(exercises);\r\n    const [weight, setWeight] = useState(0);\r\n    const [reps, setReps] = useState(0);\r\n    const selector = useRef<HTMLDivElement>(null);\r\n\r\n    useEffect(() => {\r\n        if (state === 'UPDATE_RECORD') {\r\n            const {record} = data;\r\n            setExercise(record.exercise);\r\n            setWeight(record.weight);\r\n            setReps(record.reps);\r\n        }\r\n    },[state,data]);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        switch(e.currentTarget.dataset.id) {\r\n            case 'exercise':\r\n                setExerciseList(exercises.filter(exercise => exercise.name.match(e.currentTarget.value)));\r\n                return setExercise(e.currentTarget.value);\r\n            case 'weight':\r\n                return setWeight(Number(e.currentTarget.value.replace(/[^0-9]/g, '')));\r\n            case 'reps':\r\n                return setReps(Number(e.currentTarget.value.replace(/[^0-9]/g, '')));\r\n        }\r\n    }\r\n    const onFocus = (e: React.FocusEvent<HTMLInputElement>) => selector.current?.classList.add('show');\r\n    const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        if(exercise==='' || weight<=0 || reps<= 0) return;\r\n        if(state === 'ADD_RECORD' && onAddRecord) {\r\n            onAddRecord(data.id, {id: '', exercise, weight, reps});\r\n        } else if(state === 'UPDATE_RECORD' && onUpdateRecord) {\r\n            onUpdateRecord(data.id, {id: data.record.id, exercise, weight, reps});\r\n        }\r\n        onCancel()\r\n    }\r\n    const onRemove = () => {\r\n        if(!onRemoveRecord) return;\r\n        \r\n        // TODO: 리덕스 미들웨어\r\n        dispatch(onRemoveRecord(data.id, data.record.id));\r\n        onCancel();\r\n    }\r\n    const onCancel = () => {\r\n        setExercise('');\r\n        setWeight(0);\r\n        setReps(0);\r\n        dispatch(closeModal());\r\n    }\r\n\r\n    const getExerciseList = (section: string) => {\r\n        setExerciseList(exercises.filter(exercise => {\r\n            if(section === 'all') return true;\r\n            else return exercise.section === section;\r\n        }));\r\n    }\r\n    const mapToExercises = () => {\r\n        let liArr = exerciseList.map(exercise => (\r\n            <li key={exercise.id} onClick={() => {\r\n                setExercise(exercise.name);\r\n                selector.current?.classList.remove('show');\r\n            }}>{exercise.name}</li>\r\n        ));\r\n        liArr.push(<li key='addExercise' onClick={() => {}}>+운동 추가</li> );\r\n        return liArr;\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n        <div className='input-modal'>\r\n            {state === 'UPDATE_RECORD' &&\r\n                <button type='button' className='remove' onClick={onRemove}><FontAwesomeIcon icon={faTrashAlt} /></button>\r\n            }\r\n            <form onSubmit={onSubmit}>\r\n                <div className='input-contents'>\r\n                    <div className='exercise-wrapper'>\r\n                        <label>운동</label>\r\n                        <input type='text' data-id='exercise'\r\n                            onFocus={onFocus}\r\n                            onChange={onChange}\r\n                            value={exercise}\r\n                            size={1}\r\n                        />\r\n                        <div className='exercise-selector' ref={selector}>\r\n                            <div className='section'>\r\n                                <button type='button' onClick={() => getExerciseList('all')}>ALL</button>\r\n                                <button type='button' onClick={() => getExerciseList('leg')}>하체</button>\r\n                                <button type='button' onClick={() => getExerciseList('chest')}>가슴</button>\r\n                                <button type='button' onClick={() => getExerciseList('back')}>등</button>\r\n                                <button type='button' onClick={() => getExerciseList('shoulder')}>어깨</button>\r\n                                <button type='button' onClick={() => getExerciseList('arm')}>팔</button>\r\n                                <button type='button' onClick={() => getExerciseList('abs')}>복근</button>\r\n                                <button type='button' className='right' onClick={() => selector.current?.classList.remove('show')}>취소</button>\r\n                            </div>\r\n                            <ul>\r\n                                {mapToExercises()}\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                    <div className='record-wrapper'>\r\n                        <label>무게</label>\r\n                        <label>횟수</label>\r\n                        <input type='text' data-id='weight'\r\n                            onChange={onChange}\r\n                            value={weight}\r\n                            size={1}\r\n                            />\r\n                        <input type='text' data-id='reps'\r\n                            onChange={onChange}\r\n                            value={reps}\r\n                            size={1}\r\n                        />\r\n                    </div>\r\n                    <div className='control-wrapper'>\r\n                        {state === 'ADD_RECORD' &&\r\n                            <button type='submit'>저장</button>\r\n                        }\r\n                        {state === 'UPDATE_RECORD' &&\r\n                            <button type='submit'>수정</button>\r\n                        }\r\n                        <button type='reset' onClick={onCancel}>취소</button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\nexport default ModalComponent;","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { RootState } from '../modules';\r\nimport { Record, addRecord, removeRecord, updateRecord } from '../modules/list';\r\nimport Modal from '../components/modal';\r\n\r\nfunction ModalContainer () {\r\n    const modalState = useSelector((state: RootState) => state.modal);\r\n    const exercises = useSelector((state: RootState) => state.exercise);\r\n    const dispatch = useDispatch();\r\n    \r\n    const onAddRecord = (id: string, record: Record) => {\r\n        dispatch(addRecord(id, record));\r\n    }\r\n    const onRemoveRecord = (id: string, recordId: string) => {\r\n        dispatch(removeRecord(id, recordId))\r\n    };\r\n    const onUpdateRecord = (id: string, record: Record) => {\r\n        dispatch(updateRecord(id, record))\r\n    };\r\n\r\n    return (\r\n        <>\r\n        {modalState.state !== 'CLOSE_MODAL' &&\r\n            <div className='modal-wrapper'>\r\n                {modalState.state === 'ADD_RECORD' && modalState.data &&\r\n                    <Modal state={modalState.state} \r\n                        data={modalState.data} \r\n                        exercises={exercises} \r\n                        onAddRecord={onAddRecord}\r\n                    />\r\n                }\r\n                {modalState.state === 'UPDATE_RECORD' && modalState.data &&\r\n                    <Modal state={modalState.state} \r\n                        data={modalState.data} \r\n                        exercises={exercises} \r\n                        onUpdateRecord={onUpdateRecord}\r\n                        onRemoveRecord={onRemoveRecord}\r\n                    />\r\n                }\r\n            </div>\r\n        }\r\n        </>\r\n    )\r\n}\r\nexport default ModalContainer;","import React from 'react';\r\nimport './App.scss';\r\n\r\nimport ListContainer from './containers/ListContainer';\r\nimport ModalContainer from './containers/ModalContainer';\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <ListContainer />\r\n      <ModalContainer />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { initExercise } from './exercise.json';\r\n\r\nconst ADD_EXERCISE = 'kind/ADD_EXERCISE' as const;\r\nconst REMOVE_EXERCISE = 'kind/REMOVE_EXERCISE' as const;\r\nconst UPDATE_EXERCISE = 'kind/UPDATE_EXERCISE' as const;\r\n\r\n\r\nexport const addExercise = (\r\n    name: string,\r\n    section: string\r\n) => ({\r\n    type: ADD_EXERCISE,\r\n    payload: {\r\n        id: `${section}_${new Date().getTime()}`,\r\n        name,\r\n        section,\r\n        lately: {\r\n            weight: 0,\r\n            reps: 0\r\n        }\r\n    }\r\n});\r\nexport const removeExercise = ( id: string ) => ({\r\n    type: REMOVE_EXERCISE,\r\n    payload: id\r\n});\r\nexport const updateExercise = (\r\n    id: string,\r\n    name: string,\r\n    section: string\r\n) => ({\r\n    type: UPDATE_EXERCISE,\r\n    payload: {\r\n        id,\r\n        name,\r\n        section\r\n    }\r\n})\r\n\r\ntype ExerciseAction = \r\n    | ReturnType<typeof addExercise>\r\n    | ReturnType<typeof removeExercise>\r\n    | ReturnType<typeof updateExercise>;\r\n\r\nexport type Exercise = {\r\n    id: string,\r\n    name: string;\r\n    section: string;\r\n    lately: {\r\n        weight: number;\r\n        reps: number;\r\n    }\r\n}\r\ntype ExerciseState = Exercise[];\r\n\r\nconst initialState: ExerciseState = localStorage.exerciseKind? JSON.parse(localStorage.exerciseKind) : initExercise;\r\n\r\n// 리듀서\r\nfunction Reducer (\r\n    state: ExerciseState = initialState,\r\n    action: ExerciseAction\r\n):ExerciseState {\r\n    let temp;\r\n    switch (action.type) {\r\n        case ADD_EXERCISE:\r\n            temp = state.concat({\r\n                id: action.payload.id,\r\n                name: action.payload.name,\r\n                section: action.payload.section,\r\n                lately: action.payload.lately\r\n            });\r\n            break;\r\n        case REMOVE_EXERCISE:\r\n            temp = state.filter(exercise => exercise.id !== action.payload);\r\n            break;\r\n        case UPDATE_EXERCISE:\r\n            temp = state.map(exercise => {\r\n                if(exercise.id === action.payload.id) {\r\n                    exercise = {\r\n                        ...exercise,\r\n                        name: action.payload.name,\r\n                        section: action.payload.section\r\n                    }\r\n                }\r\n                return exercise;\r\n            })\r\n            break;\r\n        default:\r\n            temp = state;\r\n            break;\r\n    }\r\n\r\n    // 로컬스토리지 저장\r\n    localStorage.exerciseKind = JSON.stringify(temp);\r\n    return temp;\r\n}\r\nexport default Reducer;","import { combineReducers } from 'redux';\r\nimport list from './list';\r\nimport exercise from './exercise';\r\nimport modal from './modal';\r\n\r\nconst rootReducer = combineReducers({\r\n    list,\r\n    exercise,\r\n    modal\r\n});\r\n\r\nexport default rootReducer;\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport './components/style/Reset.scss';\r\nimport App from './App';\r\n// import * as serviceWorker from './serviceWorker';\r\n\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\nimport rootReducer from './modules';\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();\r\n"],"sourceRoot":""}