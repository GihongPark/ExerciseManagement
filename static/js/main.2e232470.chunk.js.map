{"version":3,"sources":["modules/list.ts","components/Record.tsx","containers/RecordContainer.tsx","components/List.tsx","containers/ListContainer.tsx","App.tsx","modules/exercise.ts","modules/index.ts","index.tsx"],"names":["initialState","localStorage","exerciseManager","JSON","parse","Reducer","temp","state","action","type","concat","id","payload","title","date","records","filter","list","map","record","stringify","RecordComponent","onUpdateRecord","onRemoveRecord","useState","exercise","weight","reps","className","onClick","icon","faEdit","RecordContainer","dispatch","useDispatch","recordId","removeRecord","updateRecord","length","Record","key","faPlus","ListComponent","onRemoveList","onUpdateTitle","setTitle","onChange","e","currentTarget","value","placeholder","size","maxLength","faSave","faTimes","ListContainer","lists","useSelector","scroll","useRef","prevListsLength","useEffect","current","scrollTo","scrollHeight","removeList","updateTitle","ref","List","Math","floor","random","Date","App","exerciseKind","initExercise","name","section","lately","rootReducer","combineReducers","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2e232470.chunk.js","sourcesContent":["const ADD_LIST = 'list/ADD_LIST' as const;\r\nconst REMOVE_LIST = 'list/REMOVE_LIST' as const;\r\nconst UPDATE_TITLE = 'list/UPDATE_TITLE' as const;\r\n\r\nconst ADD_RECORD = 'record/ADD_RECORD' as const;\r\nconst REMOVE_RECORD = 'record/REMOVE_RECORD' as const;\r\nconst UPDATE_RECORD = 'record/UPDATE_RECORD' as const;\r\n\r\nlet id = () => `${Math.floor(Math.random() * 9999)}_${Math.floor(Math.random() * 9999)}_${Math.floor(Math.random() * 9999)}`;\r\nexport const addList = () => ({\r\n    type: ADD_LIST,\r\n    payload: {\r\n        id: id(),\r\n        title: '',\r\n        date: new Date(),\r\n        records: []\r\n    }\r\n});\r\nexport const removeList = (id: string) => ({\r\n    type: REMOVE_LIST,\r\n    payload: id\r\n});\r\nexport const updateTitle = (\r\n    id: string,\r\n    title: string\r\n) => ({\r\n    type: UPDATE_TITLE,\r\n    payload: {\r\n        id,\r\n        title,\r\n    }\r\n});\r\n\r\nexport const addRecord = (\r\n    id: string,\r\n    record: Record\r\n) => ({\r\n    type: ADD_RECORD,\r\n    payload: {\r\n        id: id,\r\n        record: {\r\n            id: `${id}_${new Date().getTime()}`,\r\n            exercise: record.exercise,\r\n            weight: record.weight,\r\n            reps: record.reps\r\n        }\r\n    }\r\n});\r\nexport const removeRecord = (\r\n    id: string,\r\n    recordId: string\r\n) => ({\r\n    type: REMOVE_RECORD,\r\n    payload: {\r\n        id: id,\r\n        record: {\r\n            id: recordId\r\n        }\r\n    }\r\n});\r\nexport const updateRecord = (\r\n    id: string,\r\n    record: Record\r\n) => ({\r\n    type: UPDATE_RECORD,\r\n    payload: {\r\n        id: id,\r\n        record: {\r\n            id: record.id,\r\n            exercise: record.exercise,\r\n            weight: record.weight,\r\n            reps: record.reps\r\n        }\r\n    }\r\n});\r\n\r\ntype ListAction = \r\n    | ReturnType<typeof addList>\r\n    | ReturnType<typeof removeList>\r\n    | ReturnType<typeof updateTitle>\r\n    | ReturnType<typeof addRecord>\r\n    | ReturnType<typeof removeRecord>\r\n    | ReturnType<typeof updateRecord>;\r\n\r\nexport type List = {\r\n    id: string;\r\n    title: string;\r\n    date: Date;\r\n    records: Record[]\r\n}\r\nexport type Record = {\r\n    id: string;\r\n    exercise: string;\r\n    weight: number;\r\n    reps: number;\r\n}\r\nexport type ListState = List[];\r\n\r\nconst initialState: ListState = localStorage.exerciseManager? JSON.parse(localStorage.exerciseManager) : [];\r\n\r\nfunction Reducer (\r\n    state: ListState = initialState,\r\n    action: ListAction\r\n): ListState {\r\n    let temp;\r\n    switch (action.type) {\r\n        case ADD_LIST: \r\n            temp = state.concat({\r\n                id: action.payload.id,\r\n                title: action.payload.title,\r\n                date: action.payload.date,\r\n                records: action.payload.records\r\n            });\r\n            break;\r\n        case REMOVE_LIST: \r\n            temp = state.filter(list => list.id !== action.payload); \r\n            break;\r\n        case UPDATE_TITLE:\r\n            temp = state.map(list => {\r\n                if(list.id === action.payload.id) {\r\n                    list = {\r\n                        ...list,\r\n                        title: action.payload.title\r\n                    }\r\n                }\r\n                return list;\r\n            });\r\n            break;\r\n        // TODO: list에서 record분리해서 관리하는 방법 고민\r\n        case ADD_RECORD:\r\n            temp = state.map(list => {\r\n                if(list.id === action.payload.id) {\r\n                    list = {\r\n                        ...list,\r\n                        records: [...list.records, action.payload.record]\r\n                    }\r\n                }\r\n                return list;\r\n            });\r\n            break;\r\n        case REMOVE_RECORD:\r\n            temp = state.map(list => {\r\n                if(list.id === action.payload.id) {\r\n                    list = {\r\n                        ...list,\r\n                        records: list.records.filter(record => record.id !== action.payload.record.id)\r\n                    }\r\n                }\r\n                return list;\r\n            });\r\n            break;\r\n        case UPDATE_RECORD:\r\n            temp = state.map(list => {\r\n                if(list.id === action.payload.id) {\r\n                    list = {\r\n                        ...list,\r\n                        records: list.records.map(record => {\r\n                            if(record.id === action.payload.record.id) {\r\n                                return action.payload.record\r\n                            }\r\n                            return record;\r\n                        })\r\n                    }\r\n                }\r\n                return list;\r\n            });\r\n            break;\r\n        default:\r\n            temp = state;\r\n            break;\r\n    }\r\n\r\n    // 로컬스토리지 저장\r\n    localStorage.exerciseManager = JSON.stringify(temp);\r\n    return temp;\r\n}\r\nexport default Reducer;","import React, { useState } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faEdit } from '@fortawesome/free-solid-svg-icons';\r\nimport { Record } from '../modules/list';\r\n\r\ntype props = {\r\n    id: string;\r\n    record: Record;\r\n    onRemoveRecord: (id: string, recordId: string) => void;\r\n    onUpdateRecord: (id: string, record: Record) => void;\r\n}\r\nfunction RecordComponent ({ id, record, onRemoveRecord, onUpdateRecord }: props) {\r\n    const [exercise, setExercise] = useState(record.exercise);\r\n    const [weight, setWeight] = useState(record.weight);\r\n    const [reps, setReps] = useState(record.reps);\r\n\r\n    const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        switch(e.currentTarget.dataset.id) {\r\n            case 'exercise':\r\n                return setExercise(e.currentTarget.value);\r\n            case 'weight':\r\n                return setWeight(Number(e.currentTarget.value));\r\n            case 'reps':\r\n                return setReps(Number(e.currentTarget.value));\r\n        }\r\n    }\r\n    const onModify = () => {\r\n        if(exercise==='' || weight<=0 || reps<= 0) return;\r\n        onUpdateRecord(id, {id:record.id, exercise, weight, reps});\r\n    }\r\n    const onRemove = () => {\r\n        onRemoveRecord(id, record.id);\r\n    }\r\n\r\n    return (\r\n        <li>\r\n            <div className='record-contents'>\r\n                <div>운동 : {exercise}</div>\r\n                <div>무게 : {weight}</div>\r\n                <div>횟수 : {reps}</div>\r\n            </div>\r\n            <div className=\"record-control\">\r\n                <button type='button' onClick={onModify}><FontAwesomeIcon icon={faEdit} /></button>\r\n                {/* <button type='button' onClick={onRemove}>Remove</button> */}\r\n            </div>\r\n        </li>\r\n    )\r\n}\r\nexport default RecordComponent;","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { Record, addRecord, removeRecord, updateRecord } from '../modules/list';\r\nimport { useDispatch } from 'react-redux';\r\nimport RecordComponent from '../components/Record';\r\nimport RecordInput from '../components/RecordInput';\r\n\r\ntype props = {\r\n    id: string;\r\n    records: Record[];\r\n}\r\nfunction RecordContainer ({id, records}:props) {\r\n    const dispatch = useDispatch();\r\n\r\n    const onAddRecord = (id: string, record: Record) => {\r\n        dispatch(addRecord(id, record));\r\n    }\r\n    const onRemoveRecord = (id: string, recordId: string) => {\r\n        dispatch(removeRecord(id, recordId))\r\n    };\r\n    const onUpdateRecord = (id: string, record: Record) => {\r\n        dispatch(updateRecord(id, record))\r\n    };\r\n\r\n    const mapToRecord = () => {\r\n        if(records.length === 0) return <li className='isEmpty'>운동 기록이 없습니다.</li>;\r\n\r\n        return records.map(record => (\r\n            <RecordComponent key={record.id} id={id} record={record} onRemoveRecord={onRemoveRecord} onUpdateRecord={onUpdateRecord} />\r\n        ))\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <ul className='list-contents'>{mapToRecord()}</ul>\r\n            <button type='button' className='list-input'><FontAwesomeIcon icon={faPlus} /> Add Record</button>\r\n            {/* <RecordInput id={id} onAddRecord={onAddRecord} /> */}\r\n        </>\r\n    )\r\n}\r\nexport default RecordContainer;","import React, { useState } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSave, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport {List} from '../modules/list';\r\nimport RecordContainer from '../containers/RecordContainer';\r\nimport './list.scss'\r\n\r\ntype props = {\r\n    list: List;\r\n    onRemoveList: (id: string) => void\r\n    onUpdateTitle: (id: string, title: string) => void\r\n}\r\nfunction ListComponent ({list, onRemoveList, onUpdateTitle}: props) {\r\n    const [title, setTitle] = useState(list.title);\r\n\r\n    const onTitle = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        if(e.currentTarget.value === '') {}\r\n        setTitle(e.currentTarget.value);\r\n    }\r\n    const onTitleSave = () => onUpdateTitle(list.id, title);\r\n    const onListDelete = () => onRemoveList(list.id);\r\n\r\n\r\n    return (\r\n        <div className='list'>\r\n            <div className='list-header'>\r\n                <div className='list-title'>\r\n                    <input type='text' onChange={onTitle} value={title} placeholder='title' size={1} maxLength={100} />\r\n                    <button type='button' onClick={onTitleSave}><FontAwesomeIcon icon={faSave} /></button>\r\n                </div>\r\n                <button type='button' className='list-del' onClick={onListDelete}><FontAwesomeIcon icon={faTimes} /></button>\r\n            </div>\r\n            <RecordContainer id={list.id} records={list.records} />\r\n        </div>\r\n    )\r\n}\r\nexport default ListComponent;","import React, { useEffect, useRef } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { RootState } from '../modules';\r\nimport { addList, removeList, updateTitle } from '../modules/list';\r\nimport ListComponent from '../components/List';\r\n\r\nfunction ListContainer () {\r\n    const lists = useSelector((state: RootState) => state.list);\r\n    const dispatch = useDispatch();\r\n    const scroll = useRef<HTMLDivElement>(null);\r\n    const prevListsLength = useRef(0);\r\n\r\n    useEffect(() => {\r\n        if(prevListsLength.current > 0 && prevListsLength.current < lists.length){\r\n            scroll.current?.scrollTo(0, scroll.current.scrollHeight)\r\n        }\r\n\r\n        prevListsLength.current = lists.length;\r\n    }, [lists])\r\n\r\n    const onAddList = () => {\r\n        dispatch(addList())\r\n    };\r\n    const onRemoveList = (id: string) => {\r\n        dispatch(removeList(id))\r\n    };\r\n    const onUpdateTitle = (id: string, title: string) => {\r\n        dispatch(updateTitle(id, title))\r\n    };\r\n\r\n    const mapToList = () => lists.map(list => (\r\n        <ListComponent key={list.id} \r\n            list={list} \r\n            onRemoveList={onRemoveList} \r\n            onUpdateTitle={onUpdateTitle}\r\n        />\r\n    ));\r\n    return (\r\n        <div className='list-wrapper' ref={scroll}>\r\n            {mapToList()}\r\n            <button type=\"button\" className='add_list' onClick={onAddList}>Add list</button>\r\n        </div>\r\n    )\r\n}\r\nexport default ListContainer;","import React from 'react';\r\nimport './App.scss';\r\n\r\nimport ListContainer from './containers/ListContainer';\r\n\r\nfunction App() {\r\n  return (\r\n    <ListContainer />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { initExercise } from './exercise.json';\r\n\r\nconst ADD_EXERCISE = 'kind/ADD_EXERCISE' as const;\r\nconst REMOVE_EXERCISE = 'kind/REMOVE_EXERCISE' as const;\r\nconst UPDATE_EXERCISE = 'kind/UPDATE_EXERCISE' as const;\r\n\r\n\r\nexport const addExercise = (\r\n    name: string,\r\n    section: string\r\n) => ({\r\n    type: ADD_EXERCISE,\r\n    payload: {\r\n        id: `${section}_${new Date().getTime()}`,\r\n        name,\r\n        section,\r\n        lately: {\r\n            weight: 0,\r\n            reps: 0\r\n        }\r\n    }\r\n});\r\nexport const removeExercise = ( id: string ) => ({\r\n    type: REMOVE_EXERCISE,\r\n    payload: id\r\n});\r\nexport const updateExercise = (\r\n    id: string,\r\n    name: string,\r\n    section: string\r\n) => ({\r\n    type: UPDATE_EXERCISE,\r\n    payload: {\r\n        id,\r\n        name,\r\n        section\r\n    }\r\n})\r\n\r\ntype ExerciseAction = \r\n    | ReturnType<typeof addExercise>\r\n    | ReturnType<typeof removeExercise>\r\n    | ReturnType<typeof updateExercise>;\r\n\r\nexport type Exercise = {\r\n    id: string,\r\n    name: string;\r\n    section: string;\r\n    lately: {\r\n        weight: number;\r\n        reps: number;\r\n    }\r\n}\r\ntype ExerciseState = Exercise[];\r\n\r\nconst initialState: ExerciseState = localStorage.exerciseKind? JSON.parse(localStorage.exerciseKind) : initExercise;\r\n\r\n// 리듀서\r\nfunction Reducer (\r\n    state: ExerciseState = initialState,\r\n    action: ExerciseAction\r\n):ExerciseState {\r\n    let temp;\r\n    switch (action.type) {\r\n        case ADD_EXERCISE:\r\n            temp = state.concat({\r\n                id: action.payload.id,\r\n                name: action.payload.name,\r\n                section: action.payload.section,\r\n                lately: action.payload.lately\r\n            });\r\n            break;\r\n        case REMOVE_EXERCISE:\r\n            temp = state.filter(exercise => exercise.id !== action.payload);\r\n            break;\r\n        case UPDATE_EXERCISE:\r\n            temp = state.map(exercise => {\r\n                if(exercise.id === action.payload.id) {\r\n                    exercise = {\r\n                        ...exercise,\r\n                        name: action.payload.name,\r\n                        section: action.payload.section\r\n                    }\r\n                }\r\n                return exercise;\r\n            })\r\n            break;\r\n        default:\r\n            temp = state;\r\n            break;\r\n    }\r\n\r\n    // 로컬스토리지 저장\r\n    localStorage.exerciseKind = JSON.stringify(temp);\r\n    return temp;\r\n}\r\nexport default Reducer;","import { combineReducers } from 'redux';\r\nimport list from './list';\r\nimport exercise from './exercise';\r\n\r\nconst rootReducer = combineReducers({\r\n    list,\r\n    exercise\r\n});\r\n\r\nexport default rootReducer;\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport './components/style/Reset.scss';\r\nimport App from './App';\r\n// import * as serviceWorker from './serviceWorker';\r\n\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\nimport rootReducer from './modules';\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();\r\n"],"sourceRoot":""}